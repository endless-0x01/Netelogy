import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from configure import TOKEN_TG
from database import operations
from UserStates import UserStateManager

bot = telebot.TeleBot(TOKEN_TG)

user_states_manager = UserStateManager()


class Command:
    start_test = "üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
    add_word = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
    delete_word = "üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
    show_stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

    def get_buttons():
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word"),
            InlineKeyboardButton("üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="delete_word"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
        )
        return keyboard


def start_test_mode(chat_id, user_id):

    user = operations.check_user_in_db(user_id)

    if not user:
        bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return

    data = operations.get_words_for_user(user.id)
    correct_answer = data["correct_answer"]

    if not data:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)

    for i in range(0, len(data["options"]), 2):
        if i + 1 < len(data["options"]):
            keyboard.add(
                InlineKeyboardButton(
                    data["options"][i],
                    callback_data=f"answer_{data['word_id']}_{correct_answer}_{data['options'][i]}",
                ),
                InlineKeyboardButton(
                    data["options"][i + 1],
                    callback_data=f"answer_{data['word_id']}_{correct_answer}_{data['options'][i+1]}",
                ),
            )
        else:
            keyboard.add(
                InlineKeyboardButton(
                    data["options"][i],
                    callback_data=f"answer_{data['word_id']}_{correct_answer}_{data['options'][i]}",
                )
            )

    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word_mode")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="delete_word_mode")
    )

    question_text = f"–ü–µ—Ä–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–æ: <b>{data['question_word']}</b>"
    bot.send_message(chat_id, question_text, reply_markup=keyboard, parse_mode="HTML")


def check_answer(call):
    parts = call.data.split("_")
    word_id = int(parts[1])
    correct_answer = parts[2]
    selected_answer = parts[3]
    bot.send_message(call.message.chat.id, f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}")

    if selected_answer == correct_answer:
        result_message = "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ"
        is_correct = True

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚è© –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="start_test")
        )
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, result_message)
        bot.send_message(
            call.message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=keyboard
        )
    else:
        result_message = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        is_correct = False

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start_test")
        )
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, result_message)
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
            reply_markup=keyboard,
        )

    user_id = operations.check_user_in_db(call.from_user.id)
    operations.record_result_user(user_id.id, word_id, is_correct)


@bot.message_handler(func=lambda message: not message.text.startswith("/"))
def handle_text_input(message):

    user_id = operations.check_user_in_db(message.from_user.id).id

    current_state = user_states_manager.get_state(user_id)

    if current_state:
        if current_state == "waiting_russian_word":

            user_states_manager.set_data(user_id, "russian_word", message.text)

            bot.send_message(message.chat.id, f"–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ: {message.text}")
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ")

            user_states_manager.set_state(user_id, "waiting_english_word")
            current_state = "waiting_english_word"

        elif current_state == "waiting_english_word":

            user_states_manager.set_data(user_id, "english_word", message.text)

            bot.send_message(message.chat.id, f"–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: {message.text}")
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

            user_states_manager.set_state(user_id, "waiting_category")
            current_state = "waiting_category"

        elif current_state == "waiting_category":
    

            user_states_manager.set_data(user_id, "category", message.text)
            bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}")

            result = operations.add_word_for_user(
                user_id,
                user_states_manager.get_data(user_id, "russian_word"),
                user_states_manager.get_data(user_id, "english_word"),
                user_states_manager.get_data(user_id, "category"),
            )
            if result:
                bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ")

            user_states_manager.clear_user(user_id)

            bot.send_message(
                message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Command.get_buttons()
            )

        elif current_state == 'waiting_word_search':
            found_words = operations.find_word_by_name(user_id, message.text)
            keyboard = InlineKeyboardMarkup(row_width=2)
            if found_words:
                for user_word, word in found_words:
                    keyboard.add(InlineKeyboardButton(word.russian_word, callback_data=f'delete_word_{user_word.user_id}_{word.id}'))
                
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
                keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†', callback_data=f'main_menu'))
                bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–µ–æ –º–µ–Ω—é üè†', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, f"–í—ã –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ: {message.text}")


def add_word_mode(chat_id, user_id):
    user_id_ = operations.check_user_in_db(user_id).id
    user_states_manager.set_state(user_id_, "waiting_russian_word")

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: ")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
    bot.send_message(chat_id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=keyboard)

def delete_word_mode(chat_id, user_id):
    user_states_manager.set_state(operations.check_user_in_db(user_id).id, 'waiting_word_search')
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
    bot.send_message(chat_id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    bot.answer_callback_query(call.id)

    if call.data == "start_test":
        start_test_mode(call.message.chat.id, call.from_user.id)
    elif call.data == "add_word":
        add_word_mode(call.message.chat.id, call.from_user.id)
    elif call.data == "delete_word":
        delete_word_mode(call.message.chat.id, call.from_user.id)
    elif call.data == "show_stats":
        bot.send_message(call.message.chat.id, "üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
    elif call.data.startswith("answer_"):
        check_answer(call)
    elif call.data == "main_menu":
        bot.send_message(
            call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=Command.get_buttons()
        )
    elif call.data == "add_word_mode":
        add_word_mode(call.message.chat.id, call.from_user.id)
    elif call.data == 'delete_word_mode':
        delete_word_mode(call.message.chat.id, call.from_user.id)
    elif call.data.startswith('delete_word_'):
        parts = call.data.split('_')
        user_word_id = int(parts[2])
        word_id = int(parts[3])
        result = operations.delete_word_for_user(user_word_id, word_id)

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†', callback_data='main_menu'))

        if result:
            bot.send_message(call.message.chat.id, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
            bot.send_message(call.message.chat.id, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†', reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ')
            bot.send_message(call.message.chat.id, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†', reply_markup=keyboard)



@bot.message_handler(commands=["start"])
def send_welcome(message):
    if operations.check_user_in_db(message.from_user.id):
        bot.reply_to(message, f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å {message.from_user.username}!")
    else:
        data_user = {
            "id": message.from_user.id,
            "login": message.from_user.username,
            "fname": message.from_user.first_name,
            "lname": message.from_user.last_name,
        }

        welcome_text = """–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. 
–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:

        –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
        —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ  üîô.
        –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è
                    """
        operations.create_user_db(data_user)
        bot.reply_to(
            message, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} üëã, {welcome_text}"
        )

    bot.send_message(
        message.chat.id, "–ß–µ–º –∑–∞–π–º–µ–º—Å—è: ", reply_markup=Command.get_buttons()
    )


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling()
